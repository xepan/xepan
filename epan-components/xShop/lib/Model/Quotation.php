<?php

namespace xShop;

class Model_Quotation extends \Model_Document{
	public $table="xshop_quotation";
	public $status=array('draft','approved','redesign','submitted','cancelled');
	public $root_document_name="xShop\Quotation";
	public $actions=array(
			'can_view'=>array(),
			'allow_edit'=>array(),
			'allow_add'=>array(),
			'allow_del'=>array(),
			'can_see_activities'=>array(),
			'can_send_via_email'=>array(),
		);
	
	public $notification_rules = array(
			// 'activity NOT STATUS' => array (....)
			'submitted'=>array('xShop/Quotation_Submitted/can_approve'=>['title'=>'New Quotation Submitted','message'=>'Sales Quotation Submitted  to {$customer}, by {$created_by} ','sticky'=>true]),
			'approved'=>array('xShop/Quotation/creator' => ['title'=>'Quotation Approved','message'=>'Quotation {$name} is approved by {$created_by}','sticky'=>true]),
			'redesign' =>array('xShop/Quotation/creator'=>['title'=>'Quotation for Redesign','message'=>'Quotation {$name} is rejected by {$created_by} to Redesign','sticky'=>true]),
			'cancelled' =>array('xShop/Quotation_Cancelled/can_view'=>['title'=>'Quotation Canceled','message'=>'Quotation {$name} is cancelled by {$created_by}','sticky'=>true]),
			'email' => array('xShop/Quotation_Approved/can_send_via_email'=>['title'=>'Quotation has been mailed','message'=>'Quotation {$name} is been mailed to {$to} {$to_email} by {$created_by}','sticky'=>true]),
			'live' => array('xShop/Quotation_Submitted/can_approve'=>['title'=>'Total Quotation Pending for Approval','message'=>'{$count} Quotations pending to get approved','sticky'=>true]),
			'live' => array('xShop/Quotation_Approved/creator'=>['title'=>'Total Quotation which are Approved','message'=>'{$count} Quotations approve','sticky'=>true])

		);
	

	function init(){
		parent::init();

		$this->hasOne('Epan','epan_id');
		$this->addCondition('epan_id',$this->api->current_website->id);

		$this->hasOne('xMarketingCampaign/Lead','lead_id')->sortable(true)->display(array('form'=>'autocomplete/Plus'));
		$this->hasOne('xShop/Opportunity','opportunity_id')->sortable(true)->display(array('form'=>'autocomplete/Basic'));
		$this->hasOne('xShop/Customer','customer_id')->sortable(true)->display(array('form'=>'autocomplete/Basic'));
		$this->hasOne('xShop/TermsAndCondition','termsandcondition_id')->sortable(true)->display(array('form'=>'autocomplete/Basic'))->caption('Term and Condition');
		$this->hasOne('xShop/Currency','currency_id')->sortable(true)->mandatory(true);//->display(array('form'=>'autocomplete/Basic'));

		$this->addField('name')->Caption('Quotation Number')->sortable(true)->hint('For Autogenerated, Leave Empty');
		// $this->addField('quotation_no');
		$this->getElement('status')->enum($this->status)->defaultValue('draft');

		$this->addField('total_amount')->type('money')->mandatory(true)->sortable(true)->group('b~3~Payment Detail <small> ( Leave Empty for Auto Calculation ) </small>');
		$this->addField('tax')->type('money')->group('b~3');
		$this->addField('gross_amount')->type('money')->mandatory(true)->sortable(true)->group('b~3');
		// $this->addField('discount_voucher')->group('b~3');
		$this->addField('discount_voucher_amount')->group('b~3')->defaultValue(0)->caption('Discount Amount');
		$this->addField('net_amount')->type('money')->mandatory(true)->group('b~3')->sortable(true);
		$this->addField('narration')->type('text')->type('text');

		$this->addHook('beforeDelete',$this);
		$this->addHook('beforeSave',$this);
		$this->addHook('afterSave',$this);

		$this->hasMany('xShop/QuotationItem','quotation_id');
		$this->addExpression('quotationitem_count')->set($this->refSQL('xShop/QuotationItem')->count());

		$this->hasMany('xShop/SalesOrderAttachment','related_document_id',null,'Attachements');

		// $this->add('dynamic_model/Controller_AutoCreator');
	}

	function afterSave(){
		// if( (!$this['lead_id'] AND !$this['customer_id']) )
		// 	throw $this->exception('Lead or Customer Required','ValidityCheck')->setField('customer_id');

		$this->updateAmounts();
	}

	function beforeDelete(){
		$this->ref('xShop/QuotationItem')->each(function($qi){
			$qi->forceDelete();
		});

		$atts=$this->attachments();
		if($atts){
			$atts->each(function($attach){
				$attach->forceDelete();
			});
		}
	}

	function forceDelete(){
		$this->delete();
	}

	function beforeSave(){
		if($this['lead_id'] and $this['customer_id'])
			throw $this->exception('Select Either Lead or Customer','ValidityCheck')->setField('customer_id');
			
	}

	function updateAmounts(){
		$this['total_amount']=0;
		$this['gross_amount']=0;
		$this['tax']=0;
		$this['net_amount']=0;
		
		$quotation_items_info = "";

		foreach ($this->itemRows() as $oi) {
			$this['total_amount'] = $this['total_amount'] + $oi['amount'];
			$this['gross_amount'] = $this['gross_amount'] + $oi['texted_amount'];
			$this['tax'] = $this['tax'] + $oi['tax_amount'];
			$this['net_amount'] = $this['total_amount'] + $this['tax'] - $this['discount_voucher_amount'];
			
			$quotation_items_info .= $oi['name']." ".$oi['qty']." ".$oi['amount']." ".$oi['narration']." ".$oi['custom_fields'];
		}
		
		$shop_config = $this->add('xShop/Model_Configuration')->tryLoadAny();
		if($shop_config['is_round_amount_calculation']){
			$this['net_amount'] = round($this['net_amount'],0);
		}


		//Updating Search String
		$str = "Quotation ".
				$this['name']." ".
				$this['status']. " ".
				$this['total_amount']. " ".
				$this['net_amount']. " ".
				$this['narration']. " ".
				$quotation_items_info;
		$str .= $this['customer_id']?$this->customer()->get('name'):"";
		$str .=	$this['opportunity_id']?$this->ref('opportunity_id')->get('name'):"";
		$str .=	$this['lead_id']?$this->ref('lead_id')->get('name'):"";

		$this['search_string'] = $str;
		$this->save();
	}
	function submit(){
		parent::setStatus('submitted');
	}

	function reject_page($p){
		$f = $p->add('Form');
		$f->addField('Text','message');
		$f->addSubmit('Reject');
		$self = $this;
		if($f->isSubmitted()){
			$this->setStatus('redesign');
			return true;
		}
	}
	

	function sendMail(){
		return "sendMail";
	}

	function status(){
		return $this['status'];
	}

	function cancel(){
		$this->setStatus('cancelled');
	}

	function itemrows(){
		return $this->add('xShop/Model_QuotationItem')->addCondition('quotation_id',$this->id);
	}

	function customer(){
		return $this->ref('customer_id');
	}

	function send_via_email_page($page){
		if(!$this->loaded()) throw $this->exception('Model Must Be Loaded Before Email Send');
		$email_body = $this->parseEmailBody();
		$customer = $this->customer();
		$emails = explode(',', $customer['customer_email']);
		
		$config_model=$this->add('xShop/Model_Configuration');
		$config_model->tryLoadAny();

		$form = $page->add('Form_Stacked');	
		$form->addField('line','to')->set($emails[0]);
		// array_pop(array_re/verse($emails));
		unset($emails[0]);

		$form->addField('line','cc')->set(implode(',',$emails));
		$form->addField('line','bcc');
		$form->addField('line','subject')->validateNotNull()->set($config_model['quotation_email_subject']);
		$form->addField('RichText','custom_message');
		$form->add('View')->setHTML($email_body);
		$form->addSubmit('Send');
		if($form->isSubmitted()){
			
			$subject = $this->emailSubjectPrefix($form['subject']);

			$email_body = $form['custom_message']."<br>".$email_body;
			$this->sendEmail($form['to'],$subject,$email_body,explode(',',$form['cc']),explode(',',$form['bcc']));
			$this->createActivity('email',$subject,$form['message'],$from=null,$from_id=null, $to='Customer', $to_id=$customer->id);
			return true;			
		}
		
	}

	function attachments(){
		if(!$this->loaded())
			return false;

		$atts = $this->add('xShop/Model_SalesQuotationAttachment');
		$atts->addCondition('related_root_document_name','xShop\Quotation');
		$atts->addCondition('related_document_id',$this->id);
		$atts->tryLoadAny();
		if($atts->loaded())
			return $atts;
		return false;
		// return $this->ref('Attachements')->tryLoadAny();
	}

	function setTermAndConditionEmpty(){
		if(!$this->loaded()) return;

		$this['termsandcondition_id'] = null;
		$this->save();
	}

	function termAndCondition(){
		return $this->ref('termsandcondition_id');
	}

	function parseEmailBody(){

		$tnc = $this->termAndCondition();
		$tnc = $tnc['terms_and_condition'].$this->itemsTermAndCondition();
		
		$print_order = $this->add('xShop/View_QuotationDetail',array('show_department'=>false,'show_price'=>true,'show_customfield'=>true,'show_specification'=>true));
		$print_order->setModel($this->itemrows());
		$quotation_detail_html = $print_order->getHTML(false);

		$customer = $this->customer();
		$customer_email=$customer->get('customer_email');

		$config_model=$this->add('xShop/Model_Configuration');
		$config_model->tryLoadAny();
		
		// $subject = $config_model['quotation_email_subject']?:$this['name']." "."::"." "."Quotation";
		
		$email_body=$config_model['quotation_email_body']?:"Quotation Layout Is Empty";
		
		//REPLACING VALUE INTO ORDER DETAIL TEMPLATES
		$email_body = str_replace("{{customer_name}}", $customer['customer_name'], $email_body);
		$email_body = str_replace("{{mobile_number}}", $customer['mobile_number'], $email_body);
		$email_body = str_replace("{{address}}",$customer['address'], $email_body);
		$email_body = str_replace("{{order_billing_address}}",$customer['billing_address'], $email_body);
		$email_body = str_replace("{{order_shipping_address}}",$customer['shipping_address'], $email_body);
		$email_body = str_replace("{{customer_email}}", $customer['customer_email'], $email_body);
		$email_body = str_replace("{{quotation_no}}", $this['name'], $email_body);
		$email_body = str_replace("{{quotation_date}}", $this['created_at'], $email_body);
		$email_body = str_replace("{{quotation_detail}}", $quotation_detail_html, $email_body);
		$email_body = str_replace("{{terms_and_conditions}}", $tnc?$tnc:" ", $email_body);
		$email_body = str_replace("{{quotation_narration}}",$this['narration'], $email_body);

		return $email_body;
	}

	//Model Return Currency name or Model
	// function currency($name=true){
	// 	if($name)
	// 		return $this->ref('currency_id')->get('name');
		
	// 	return $this->ref('currency_id');
	// }

	function itemsTermAndCondition(){
		$tnc = "";
		$item_array = array();
		foreach ($this->itemRows() as $q_item) {
			$item = $q_item->item();
			if(in_array($item->id, $item_array)) continue;

			$tnc .= $item['terms_condition'];
			$item_array[]=$item->id;
		}

		return $tnc;
		
	}

}

